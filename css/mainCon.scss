@import "_basic.scss";

/* small */

@media screen and (max-width: 480px) {
  //480이하인 경우 모바일
  header {
    padding: 0.2rem;
  }

  .homeLogo {
    font-size: 25px;
  }

  .listBox li span {
    font-size: 0.3rem;
  }

  #RoomTemp {
    width: 95%;
    height: 40%;
  }

  #foodNDateSp {
    font-size: 0.1rem;
  }
}

/* large */
@media screen and (min-width: 481px) {
  header {
    padding: 0.4rem;
  }

  .homeLogo {
    font-size: 40px;
  }

  #foodNSp {
    font-size: 3%;
  }

  #RoomTemp {
    width: 95%;
    height: 35%;
  }

  #foodNDateSp {
    font-size: 2%;
  }
}

/*basic*/

html {
  main {
    padding-top: 3%;
    width: 100%;
    height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
}

body {
  background: #5661f2;
  font-family: "LINESeedKR-Bd", "Open Sans", "Helvetica Neue", sans-serif;
}

header {
  background-color: #46b2f0;
  top: 0;
  display: flex;
  flex-direction: row;
  //item을 무조건 한줄에 두기
  justify-content: space-between;
  //중앙을 비우고 양옆에 두기
  box-shadow: 0 4px 30px rgba(#000, 0.2);
  align-items: center;

  .homeLogo {
    color: white;
    font-weight: 700;
    margin: 10px;
  }

  .mainBtn {
    display: flex;
    flex-direction: row;
    align-items: center;
  }
}

/*  Nested 시 이동하면 속성 사라짐*/
.listBox {
  border-radius: 0.4rem;
  border: 1px solid #d4d3e8;
  background-color: white;
  position: relative;
  align-self: end;
  z-index: 2;
  @media screen and (min-width: 481px) {
    height: 2.5rem;
    width: 8rem;
    margin: 0.5rem;
    box-shadow: 5px 3px 0px rgba(#000, 0.2);
    padding: 0.4rem;
  }

  @media screen and (max-width: 480px) {
    height: 1.4rem;
    margin: 0.3rem;
    box-shadow: 0.2rem 0.2rem 0px rgba(#000, 0.2);
    padding: 0.2rem;
    width: 100px;
  }
}

.list-grid {
  display: grid;
  grid-template-columns: 1fr 0.7rem;
  grid-template-rows: repeat(2, 1fr);
  grid-template-areas:
    "foodNSp deleteBtn"
    "foodNDateSp foodNDateSp";

  .deleteBtn {
    margin: 0;
    padding: 0;
    border: 0;
    grid-area: deleteBtn;
    background-color: white;
  }

  .foodNSp {
    font-size: 0.3em;
    grid-area: foodNSp;
  }

  .foodNDateSp {
    color: red;
    font-weight: 600;
    grid-area: foodNDateSp;
  }
}

#food {
  min-height: 20%;
  flex-direction: column;
  justify-content: flex-end;
  padding-top: 2rem;
  grid-area: food;
}

.temp-box {
  display: flex;
  align-content: center;
  align-items: center;
  flex-wrap: wrap;
  background-color: white;
  border: 1px solid #d4d3e8;
  border-radius: 1rem;
  box-shadow: 2px 3px 0px rgba(#000, 0.2);
  position: relative;
  justify-content: center;

  @media screen and (max-width: 480px) {
    flex-direction: column;
  }

  @media screen and (min-width: 481px) {
    flex-direction: row;
  }
}

.temp-title {
  display: flex;
  position: absolute;
  top: 0;

  .entire-li-btn {
    border: 1px solid #d4d3e8;
    border-radius: 0.4rem;
    width: 20px;
    cursor: pointer;
    right: 0;

    @media screen and (max-width: 480px) {
      margin: 0.3rem;
    }

    @media screen and (min-width: 481px) {
      margin: 0.5rem;
    }

    &:hover {
      color: white;
      background-color: black;
    }
  }

  p {
    @media screen and (max-width: 480px) {
      margin: 0.3rem;
    }

    @media screen and (min-width: 481px) {
      margin: 0.5rem;
    }
  }
}

#stored-box {
  /*
    error : [Intervention] Unable to preventDefault inside passive event listener due to target being treated as passive. See <URL>

    터치 이벤트 리스너는 종종 심각한 스크롤 성능 문제
    Chrome은 터치 이벤트 리스너가 수동적(passive)이 되도록 허용
    preventDefault()리스너 내부에 대한 호출이 무시
    preventDefault()개입이 활성화된 이벤트를 호출할 때 DevTools가 경고를 기록
    요소 내에서 모든 브라우저 스크롤 및 확대/축소를 방지하려면 해당 요소 touch-action: none에 적용
    https://developer.chrome.com/blog/scrolling-intervention/*/
  touch-action: none;
  margin-top: 0.5rem;
  border-radius: 10px;
  width: 95%;
  display: grid;
  min-height: 80%;
  grid-template-rows: 30% 40% 30%;
  grid-template-columns: repeat(2, 50%);
  grid-template-areas:
    "food food"
    "frozen refrigerated"
    "roomTemp roomTemp";

  @media screen and (max-width: 480px) {
    gap: 0.2rem;
  }

  @media screen and (min-width: 481px) {
    gap: 1rem;
  }
}

#frozen {
  grid-area: frozen;
}

#refrigerated {
  grid-area: refrigerated;
}

#roomTemp {
  grid-area: roomTemp;
  padding: 1rem 2rem 0 2rem;
}

.dragging {
  opacity: 0.5;
}

.bg-modal {
  position: fixed;
  background-color: rgba(0, 0, 0, 0.6);
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: space-around;
  align-items: center;
  z-index: 5;

  .modal-overlay {
    position: absolute;
    /*overlay를 한장 더 깔지 않으면 모달창 아래의 link나 button을 클릭할 수 있게 된다*/
    width: 100%;
    height: 100%;
  }

  .modal-content {
    background-color: white;
    border-radius: 10px;
    position: relative;
    box-shadow: 0 15px 25px rgb(0 0 0 / 40%);
    width: 60%;
    padding: 1%;

    .close {
      align-self: flex-start;
    }

    .food-form {
      display: flex;
      width: 100%;
      height: 100%;
      flex-direction: column;
      align-items: center;
    }
  }
}

.hidden {
  display: none;
}

/*hidden 다시 넣지 않으면 bg-modal이 이후 적용되어 사라짐*/
.tab-btn {
  background-color: #212931;
  color: #ffffff;
  border-radius: 0.3rem;
  font-weight: 900;
  text-align: center;
  box-shadow: 2px 2px 2px rgba(0, 0, 0, 0.3);
  cursor: pointer;

  &:hover {
    background-color: #18bfef;
    color: #ffffff;
  }

  @media screen and (min-width: 481px) {
    padding: 0.5rem;
  }
}

.submit-alarm {
  color: red;
}

.entire {
  overflow: scroll;
  z-index: 100;
  position: fixed;
}

.modal-open-body {
  overflow: hidden;
}
